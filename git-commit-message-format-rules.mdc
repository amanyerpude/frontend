---
alwaysApply: false
---

# Git Commit Message Format Rules

## Required Prefixes
All commit messages **must** start with one of these keywords to pass the CI/CD pipeline:

- **`feat:`** - New features
- **`fix:`** - Bug fixes  
- **`devops:`** - DevOps/infrastructure changes
- **`chore:`** - Maintenance tasks
- **`refactor:`** - Code restructuring
- **`perf:`** - Performance improvements
- **`docs:`** - Documentation updates
- **`Merge`** - Merge commits
- **`Revert`** - Revert commits
- **`build(deps):`** - Dependency updates
- **`Bump`** - Version bumps

## Format Requirements
- **Case**: Use lowercase for commit type
- **Mood**: Use imperative mood (e.g., "add" not "added")
- **Description**: Be descriptive and clear
- **Length**: Keep first line under 50 characters if possible

## Breaking Changes
- Add `BREAKING CHANGE:` in the commit **body** (not subject line)
- Can be combined with any prefix (feat, fix, etc.)

## Examples
- `feat: add user dashboard component`
- `fix: resolve memory leak in image gallery`
- `devops: update Docker configuration`
- `chore: update dependencies to latest versions`
- `refactor: improve component structure`
- `perf: optimize rendering performance`
- `docs: update README with new features`

## Breaking Change Example
feat: add new feature called feature_b
BREAKING CHANGE: Chances of breaking feature_a is more

## Pipeline Enforcement
- Commits without these prefixes will cause **CI/CD pipeline failures**
- The validation happens in the GitHub Actions workflow
- This ensures consistent commit history and proper categorization

## Common Mistakes to Avoid
- ❌ `style: fix formatting` (style: not allowed)
- ❌ `update: change colors` (update: not allowed)
- ❌ `improve: better UX` (improve: not allowed)
- ❌ `added new feature` (missing prefix)
- ❌ `Fix: bug` (uppercase F)